AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Website Watchdog - Uptime monitoring and sentiment analysis application.

Globals:
  Function:
    Timeout: 90
    MemorySize: 128
    Runtime: python3.13

Resources:
  # Lambda Function for handling API requests from the frontend
  DataApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: data_api_lambda/
      Handler: data_api_lambda.handler
      Environment:
        Variables:  
          DYNAMODB_TABLE: !Ref WebsitesTable
      Policies:
        # Grant permissions to read/write from/to the DynamoDB table
        - DynamoDBCrudPolicy:
            TableName: !Ref WebsitesTable
      Events:
        GetWebsites:
          Type: Api
          Properties:
            Path: /websites
            Method: get
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        AddWebsite:
          Type: Api
          Properties:
            Path: /websites
            Method: post
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteWebsite:
          Type: Api
          Properties:
            Path: /websites
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
    Metadata:
      BuildMethod: python3.13

  # Lambda Function for scheduled uptime checks and sentiment analysis
  UptimeCheckerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: uptime_checker_lambda/
      Handler: uptime_checker_lambda.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebsitesTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SnsTopic.TopicName
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref WebsitesTable
          SNS_TOPIC_ARN: !Ref SnsTopic
          # NEW: Use the Bearer Token for Twitter API v2
          # You will set the actual value in your .env file for local testing
          # and in the Lambda console for production.
          TWITTER_BEARER_TOKEN: "YOUR_BEARER_TOKEN_HERE" 
      Events:
        ScheduledCheck:
          Type: Schedule
          Properties:
            # FIX: Runs twice a month to stay in Twitter's 100-post limit
            Schedule: cron(0 0 1,15 * ? *)
        
        # --- NEW: Add this API trigger ---
        OnDemandCheck:
          Type: Api
          Properties:
            Path: /request-check  # Re-using the path
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
    DependsOn:
      - ApiGatewayApi
      - SnsTopic
      - WebsitesTable

  # DynamoDB Table to store website data
  WebsitesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: website_url
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # SNS Topic for notifications
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: WebsiteWatchdogAlerts
      Subscription:
        # NOTE: You MUST replace this with your email and confirm the subscription
        - Endpoint: "sidscam10@gmail.com"
          Protocol: "email"

  # API Gateway Definition
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'" # For production, restrict this to your domain
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: "arn:aws:cognito-idp:ap-south-2:896015496487:userpool/ap-south-2_bLLgSfyzX"

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://__${ServerlessRestApi}__.execute-api.${AWS::Region}.amazonaws.com/prod/"
  DataApiFunction:
    Description: "Data API Lambda Function ARN"
    Value: !GetAtt DataApiFunction.Arn
  UptimeCheckerFunction:
    Description: "Uptime Checker Lambda Function ARN"
    Value: !GetAtt UptimeCheckerFunction.Arn
